image: alpine

pipelines:
  tags:
    rollback-prod-*:
      - step:
          name: Rollback production deploy
          image: pipelinecomponents/deployer
          script:
            - dep rollback production
    rollback-full-prod-*:
      - step:
          name: Full rollback production deploy
          image: pipelinecomponents/deployer
          script:
            - dep rollback:full production
    rollback-test-*:
      - step:
          name: Rollback test deploy
          image: pipelinecomponents/deployer
          script:
            - dep rollback test
    rollback-full-test-*:
      - step:
          name: Full rollback test deploy
          image: pipelinecomponents/deployer
          script:
            - dep rollback:full test
  branches:
    production:
      - step:
          name: Build assets
          script:
            - apk --no-cache add git yarn nodejs npm php7 php7-pdo php7-curl php7-tokenizer php7-fileinfo php7-ctype php7-bcmath php7-imagick php7-dom php7-simplexml php7-xmlreader php7-json php7-gd php7-exif php7-xmlwriter php7-xml php7-zip composer tzdata
            - export VERSION=$(TZ=":Europe/Moscow" date +v%y.%-m.%-d%-H%M)
            - printf $VERSION > public/release
            - mv .env.production .env
            - composer install --no-scripts
            - yarn install
            - npm run prod
          artifacts:
            - public/admin/**
            - public/release
            - .env
      - step:
          name: Deploy to production server
          image: pipelinecomponents/deployer
          deployment: production
          script:
            - dep deploy production
      - step:
          name: Sentry Release
          image: getsentry/sentry-cli
          script:
            - apk --no-cache add git
            - export VERSION=$(cat public/release)
            - export SENTRY_VERSION=$VERSION-$VERSION_POSTFIX
            - sentry-cli releases -o "${SENTRY_ORG}" new -p "${SENTRY_PROJECT_BACKEND}" -p "${SENTRY_PROJECT_FRONTEND}" "${SENTRY_VERSION}"
            - sentry-cli releases -o "${SENTRY_ORG}" set-commits "${SENTRY_VERSION}" --auto
            - sentry-cli releases -o "${SENTRY_ORG}" finalize "${SENTRY_VERSION}"
            - sentry-cli releases -o "${SENTRY_ORG}" deploys "${SENTRY_VERSION}" new -e "production"
            - git tag -a ${VERSION} -m "Build ${BITBUCKET_BUILD_NUMBER}"
            - git push origin --tags
    test:
      - step:
          name: Build admin assets
          script:
            - apk --no-cache add git yarn nodejs npm php7 php7-pdo php7-curl php7-tokenizer php7-fileinfo php7-ctype php7-bcmath php7-imagick php7-dom php7-simplexml php7-xmlreader php7-json php7-gd php7-exif php7-xmlwriter php7-xml php7-zip composer tzdata
            - export VERSION=$(TZ=":Europe/Moscow" date +v%y.%-m.%-d%-H%M)
            - printf $VERSION > public/release
            - mv .env.test .env
            - composer install --no-scripts
            - yarn install
            - npm run dev
          artifacts:
            - public/admin/**
            - public/release
            - .env
      - step:
          name: Deploy to test server
          image: pipelinecomponents/deployer
          deployment: test
          script:
            - dep deploy test
      - step:
          name: Sentry Release
          image: getsentry/sentry-cli
          script:
            - apk --no-cache add git
            - export VERSION=$(cat public/release)
            - export SENTRY_VERSION=$VERSION-$VERSION_POSTFIX
            - sentry-cli releases -o "${SENTRY_ORG}" new -p "${SENTRY_PROJECT_BACKEND}" -p "${SENTRY_PROJECT_FRONTEND}" "${SENTRY_VERSION}"
            - sentry-cli releases -o "${SENTRY_ORG}" set-commits "${SENTRY_VERSION}" --auto
            - sentry-cli releases -o "${SENTRY_ORG}" finalize "${SENTRY_VERSION}"
            - sentry-cli releases -o "${SENTRY_ORG}" deploys "${SENTRY_VERSION}" new -e "test"
            - git tag -a ${VERSION} -m "Build ${BITBUCKET_BUILD_NUMBER}"
            - git push origin --tags
